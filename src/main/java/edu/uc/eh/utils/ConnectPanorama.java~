package edu.uc.eh.utils;


import edu.uc.eh.datatypes.AssayType;
import edu.uc.eh.domain.GctFile;
import org.labkey.remoteapi.CommandException;
import org.labkey.remoteapi.Connection;
import org.labkey.remoteapi.query.SelectRowsCommand;
import org.labkey.remoteapi.query.SelectRowsResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;

/**
 * Created by chojnasm on 7/13/15.
 */

@Service
public class ConnectPanorama {

    private static final Logger log = LoggerFactory.getLogger(ConnectPanorama.class);

    @Value("${panorama.folders}")
    private String panoramaFolders;// = "LINCS/P100,LINCS/GCP";

    @Value("${panorama.runIdUrl}")
    private String runIdUrl;//="https://panoramaweb.org/labkey/targetedms/LINCS/%s/showPrecursorList.view?id=%d";

    @Value("${panorama.gctDownloadUrl}")
    private String gctDownloadUrl;

    @Value("${panorama.gctDownloadUrl2}")
    private String gctDownloadUrl2;

    @Value("${panorama.connectionUrl}")
    private String panoramaConnectionUrl;

    @Value("${panorama.peptideInternalIdUrl}")
    private String peptideInternalIdsUrl;

    @Value("${panorama.chromatogramUrl}")
    private String chromatogramUrl;

    @Value("${panorama.peptideAnnotationsUrl}")
    private String peptideAnnotationsUrl;

    @Value("${panorama.replicateAnnotationsUrl}")
    private String replicateAnnotationsUrl;

    public List<String> gctDownloadUrls(boolean ifProcessed) throws IOException, CommandException {

        List<String> output = new ArrayList<>();
        String[] folderNames = panoramaFolders.split(",");
        String gcpOrP100;

        for (String folderName : folderNames) {
            for (Integer runId : getRunIdsFromDatabase(folderName)) {

                gcpOrP100 = folderName.contains("GCP") ? "GCP" : "P100";

                output.add(String.format(gctDownloadUrl2, gcpOrP100, runId, gcpOrP100, runId, ifProcessed));
            }
        }
        return output;
    }



    private List<Integer> getRunIdsFromDatabase(String folderName) throws IOException, CommandException {
        ArrayList<Integer> runIds = new ArrayList<Integer>();
        Connection cn = new Connection(panoramaConnectionUrl);

        SelectRowsCommand cmd = new SelectRowsCommand("targetedms", "runs");
        cmd.getColumns().addAll(Arrays.asList("Id", "Description", "Status"));

        SelectRowsResponse response = cmd.execute(cn, folderName);
        List<Map<String, Object>> rows = response.getRows();

        for (Map<String, Object> row : rows) {
            if(row.get("Description").toString().contains("QC")) continue; // skip Quality Control files
            if(row.get("Status") != null && row.get("Status").toString().contains("failed")) continue; // skip failed imports
            runIds.add((Integer) row.get("Id"));
        }
  //*****************************

        ArrayList<Integer> runIds2 = new ArrayList<Integer>();
        //runIds2.add(9024);

//25241
//runIds2.add(25241);
runIds2.add(25265);
runIds2.add(16048);
runIds2.add(16046);           
runIds2.add(16047);               
runIds2.add(16141);  

        //runIds2.add(8772);
        //runIds2.add(8771);

runIds2.add(19772
               
runIds2.add(20677            
runIds2.add(25454             
runIds2.add(25461              
runIds2.add(20948              
runIds2.add(24961               
runIds2.add(25011                
runIds2.add(25256                
runIds2.add(4420                
runIds2.add(6808                 
runIds2.add(9024                
runIds2.add(4425              
runIds2.add(4424               
runIds2.add(4442              
4421              
4426             
4422                
4431                
4423                
4435                
4440                
4520                 
9202                 
9206               
8064                
8411              
13243               
14018              
4403               
8063                 
12200                
8772                
14050                
13068                
13923                 
16051              
16052                
16355                 
20406                
20449               
20875              
3106                 
3030                 
3281                
3280                
3031                
3063                 
3064                 
3083                
3085                 
4165                
6650                 
6874                
6872                 
6873                 
9209                 
7988                 
8060                 
12201
                
8512
                
13921
                
13069
                 
12202
                
8771
                 
14026

        return runIds2;

        //*****************************
        //return runIds;
        
    }

    public HashMap<String, Integer> getPeptideIdsFromJSON(List<String> peptideIds, AssayType assayType, int runId) throws IOException {

        HashMap<String,Integer> output;

        StringBuilder sb = new StringBuilder();

        for(String peptideId : peptideIds){
            String escapedPeptideId = peptideId.replaceAll("\\+", "%2B");
            if(sb.length()==0){
                sb.append(escapedPeptideId);
            }else{
                sb.append(";").append(escapedPeptideId);
            }
        }

        String stepOne = String.format(peptideInternalIdsUrl, assayType, sb.toString(), runId);

        output= UtilsParse.parsePeptideNumbers(stepOne, peptideIds);

        return output;
    }

    public String getRunIdLink(GctFile gctFile){

        AssayType assayType = gctFile.getAssayType();
        int runId = gctFile.getRunId();

        return String.format(runIdUrl,assayType,runId);
    }

    public String getChromatogramUrl(AssayType assayType, Integer peptide, String replicateId) {
        return String.format(chromatogramUrl, assayType, peptide, replicateId);
    }


    /**
     * Insert assay name into Panorama API URL template for peptide annotations.
     * @param assayType
     * @return
     */
    public String getPeptideJsonUrl(AssayType assayType) {
        return String.format(peptideAnnotationsUrl, assayType);
    }

    /**
     * Insert assay name into Panorama API URL template for replicate annotations.
     * @param assayType
     * @return
     */
    public String getReplicateJsonUrl(AssayType assayType) {
        return String.format(replicateAnnotationsUrl, assayType);
    }
}
